#!/usr/bin/env python3

import sys
import os
import requests
import json
import logging
import re
from datetime import datetime

def setup_logger(vendor):
    # Create a logger
    logger = logging.getLogger('CVELogger')
    logger.setLevel(logging.INFO)

    # Create a file handler for logging
    log_filename = f"{vendor}_{datetime.now().strftime('%Y-%m-%d_%H-%M-%S')}.log"
    file_handler = logging.FileHandler(log_filename)
    file_handler.setLevel(logging.INFO)

    # Create a formatter and set it for the file handler
    formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s', datefmt='%Y-%m-%d %H:%M:%S')
    file_handler.setFormatter(formatter)

    # Add the file handler to the logger
    logger.addHandler(file_handler)

    return logger, log_filename

def extract_cve_numbers_from_log(log_filename):
    # Read CVE numbers from the log file and extract them using regular expressions
    with open(log_filename, 'r') as log_file:
        log_content = log_file.read()
        cve_numbers = re.findall(r'CVE-[0-9]*-[0-9]*', log_content)

    # Sort the CVE numbers in reverse order
    cve_numbers.sort(reverse=True)

    return cve_numbers

def main():
    # Check if API key is set as environment variable
    api_key = os.getenv('API_KEY')
    if api_key is None:
        print("API key not found. Please set API_KEY environment variable.")
        return

    # Check if vendor name is provided as command line argument
    if len(sys.argv) != 2:
        print("Usage: python script.py <vendor>")
        return

    vendor = sys.argv[1]

    # Setup logger
    logger, log_filename = setup_logger(vendor)

    # Define the URL and parameters
    url = "https://services.nvd.nist.gov/rest/json/cves/2.0"
    params = {"keywordSearch": vendor}

    # Define headers including the apiKey
    headers = {
        "Accept": "application/json",
        "apiKey": api_key
    }

    # Send the GET request
    response = requests.get(url, params=params, headers=headers)

    # Check if the request was successful (status code 200)
    if response.status_code == 200:
        # Parse the JSON response
        data = response.json()

        # Pretty print the JSON data
        log_message = json.dumps(data, indent=4)
        print(log_message)
        logger.info(log_message)

        # Extract CVE numbers from the log file
        cve_numbers = extract_cve_numbers_from_log(log_filename)

        # Prepend the NIST URL to each CVE number
        nist_urls = [f"https://nvd.nist.gov/vuln/detail/{cve}" for cve in cve_numbers]

        # Write the CVE numbers with NIST URLs to a new file
        output_filename = f"{vendor}_cves.txt"
        with open(output_filename, 'w') as output_file:
            output_file.write('\n'.join(nist_urls))
    else:
        # Print an error message if the request failed
        error_message = f"Error: {response.status_code}"
        print(error_message)
        logger.error(error_message)

if __name__ == "__main__":
    main()
