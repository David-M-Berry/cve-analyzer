#!/usr/bin/env python3

import json
import sys
from datetime import datetime
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from collections import defaultdict
import mplcursors

def load_cve_data(log_filename):
    with open(log_filename, 'r') as file:
        data = json.load(file)
    return data

def extract_dates_and_metrics(data):
    dates = set()  # Use a set to store unique dates
    basescores = []
    exploitabilityscores = []
    impactscores = []
    cve_numbers = defaultdict(list)
    
    vulnerabilities = data.get('vulnerabilities', [])
    for vulnerability in vulnerabilities:
        cve = vulnerability['cve']
        cve_id = cve['id']
        published_date = cve['published']
        date = datetime.strptime(published_date.split('T')[0], '%Y-%m-%d').date()
        dates.add(date)  # Add unique dates to the set
        cve_numbers[date].append(cve_id)

        # Extract additional metrics if they exist
        metrics = cve.get('metrics', {})
        cvss = None

        if 'cvssMetricV31' in metrics:
            cvss = metrics['cvssMetricV31'][0]
        elif 'cvssMetricV30' in metrics:
            cvss = metrics['cvssMetricV30'][0]
        elif 'cvssMetricV2' in metrics:
            cvss = metrics['cvssMetricV2'][0]

        if cvss:
            cvss_data = cvss.get('cvssData', {})
            basescores.append((date, cvss_data.get('baseScore', 0), cve_id))
            exploitabilityscores.append((date, cvss.get('exploitabilityScore', 0), cve_id))
            impactscores.append((date, cvss.get('impactScore', 0), cve_id))
    
    return list(dates), basescores, exploitabilityscores, impactscores, cve_numbers

def plot_time_series(dates, basescores, exploitabilityscores, impactscores, cve_numbers):
    # Sort the dates
    dates_sorted = sorted(dates)
    
    fig, axs = plt.subplots(3, 1, figsize=(12, 12), sharex=True)
    fig.suptitle('CVE Vulnerability Metrics Over Time', fontsize=16)

    # Plot basescore over time
    if basescores:
        base_dates, base_scores, base_cves = zip(*basescores)
        base_scatter = axs[0].scatter(base_dates, base_scores, color='b', label='Base Score')

    axs[0].plot(base_dates, base_scores, linestyle='-', color='b', linewidth=0.75)  # Connect the points with lines
    axs[0].set_ylabel('Base Score')
    axs[0].grid(True)

    # Plot exploitability score over time
    if exploitabilityscores:
        exploit_dates, exploit_scores, exploit_cves = zip(*exploitabilityscores)
        exploit_scatter = axs[1].scatter(exploit_dates, exploit_scores, color='g', label='Exploitability Score')

    axs[1].plot(exploit_dates, exploit_scores, linestyle='-', color='g', linewidth=0.75)  # Connect the points with lines
    axs[1].set_ylabel('Exploitability Score')
    axs[1].grid(True)

    # Plot impact score over time
    if impactscores:
        impact_dates, impact_scores, impact_cves = zip(*impactscores)
        impact_scatter = axs[2].scatter(impact_dates, impact_scores, color='r', label='Impact Score')

    axs[2].plot(impact_dates, impact_scores, linestyle='-', color='r', linewidth=0.75)  # Connect the points with lines
    axs[2].set_ylabel('Impact Score')
    axs[2].grid(True)

    # Set the x-axis major locator and formatter for all plots
    for ax in axs:
        ax.xaxis.set_major_locator(mdates.YearLocator())
        ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))

    plt.xlabel('Date')
    plt.tight_layout(rect=[0, 0.03, 1, 0.95])

    # Add tooltips
    if base_scatter:
        mplcursors.cursor(base_scatter).connect(
            "add", lambda sel: sel.annotation.set_text(base_cves[sel.index])
        )
    if exploit_scatter:
        mplcursors.cursor(exploit_scatter).connect(
            "add", lambda sel: sel.annotation.set_text(exploit_cves[sel.index])
        )
    if impact_scatter:
        mplcursors.cursor(impact_scatter).connect(
            "add", lambda sel: sel.annotation.set_text(impact_cves[sel.index])
        )

    plt.show()

def main():
    if len(sys.argv) != 2:
        print("Usage: python script.py <log_filename>")
        sys.exit(1)

    log_filename = sys.argv[1]
    data = load_cve_data(log_filename)
    dates, basescores, exploitabilityscores, impactscores, cve_numbers = extract_dates_and_metrics(data)
    
    plot_time_series(dates, basescores, exploitabilityscores, impactscores, cve_numbers)

if __name__ == "__main__":
    main()

